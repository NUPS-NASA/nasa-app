/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Service health check
         * @description Expose basic runtime metadata for uptime monitoring.
         */
        get: operations["read_root_api__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Return every registered user with eager-loaded profile data.
         */
        get: operations["list_users_api_users_get"];
        put?: never;
        /**
         * Create a user
         * @description Persist a new user with optional profile data.
         */
        post: operations["create_user_api_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a user
         * @description Retrieve a user by identifier.
         */
        get: operations["get_user_api_users__user_id__get"];
        /**
         * Replace a user's attributes
         * @description Update core user fields and optionally their profile.
         */
        put: operations["update_user_api_users__user_id__put"];
        post?: never;
        /**
         * Delete a user
         * @description Remove a user and their profile.
         */
        delete: operations["delete_user_api_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a user's profile
         * @description Return a user's profile, ensuring both user and profile exist.
         */
        get: operations["get_user_profile_api_users__user_id__profile_get"];
        /**
         * Upsert a user's profile
         * @description Create or update a user's profile and return the current representation.
         */
        put: operations["update_user_profile_api_users__user_id__profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List following
         * @description Return users that the specified account is following.
         */
        get: operations["list_following_api_users__user_id__following_get"];
        put?: never;
        /**
         * Follow another user
         * @description Create a follow relationship where the path user follows another user.
         */
        post: operations["follow_user_api_users__user_id__following_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/following/{following_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unfollow a user
         * @description Delete the follow relationship between two users.
         */
        delete: operations["unfollow_user_api_users__user_id__following__following_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List followers
         * @description Return users that follow the specified account.
         */
        get: operations["list_followers_api_users__user_id__followers_get"];
        put?: never;
        /**
         * Add a follower
         * @description Create a follow relationship where another user follows the path user.
         */
        post: operations["add_follower_api_users__user_id__followers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/followers/{follower_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a follower
         * @description Delete the follow relationship where the path user is followed by another user.
         */
        delete: operations["remove_follower_api_users__user_id__followers__follower_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories (uploads)
         * @description Return repositories applying optional filters.
         */
        get: operations["list_repositories_api_repositories_get"];
        put?: never;
        /**
         * Create a repository (upload)
         * @description Create a new repository for the provided owner.
         */
        post: operations["create_repository_api_repositories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List a user's uploads
         * @description Return repositories owned by the specified user.
         */
        get: operations["list_user_repositories_api_users__user_id__repositories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get repository
         * @description Return a repository by identifier.
         */
        get: operations["get_repository_api_repositories__repository_id__get"];
        /**
         * Update repository
         * @description Update repository attributes.
         */
        put: operations["update_repository_api_repositories__repository_id__put"];
        post?: never;
        /**
         * Delete repository
         * @description Delete a repository.
         */
        delete: operations["delete_repository_api_repositories__repository_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repositories/{repository_id}/star": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Star a repository
         * @description Add a star association for the repository.
         */
        put: operations["star_repository_api_repositories__repository_id__star_put"];
        post?: never;
        /**
         * Unstar a repository
         * @description Remove a star association for the repository.
         */
        delete: operations["unstar_repository_api_repositories__repository_id__star_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/stars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List starred repositories
         * @description Return repositories starred by the user.
         */
        get: operations["list_user_stars_api_users__user_id__stars_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List projects */
        get: operations["list_projects_api_projects_get"];
        put?: never;
        /** Create a project */
        post: operations["create_project_api_projects_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project */
        get: operations["get_project_api_projects__project_id__get"];
        /** Update project */
        put: operations["update_project_api_projects__project_id__put"];
        post?: never;
        /** Delete project */
        delete: operations["delete_project_api_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List project members */
        get: operations["list_project_members_api_projects__project_id__members_get"];
        put?: never;
        /** Add a project member */
        post: operations["add_project_member_api_projects__project_id__members_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}/members/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a project member */
        delete: operations["remove_project_member_api_projects__project_id__members__user_id__delete"];
        options?: never;
        head?: never;
        /** Update member role */
        patch: operations["update_project_member_api_projects__project_id__members__user_id__patch"];
        trace?: never;
    };
    "/api/projects/{project_id}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repositories in a project */
        get: operations["list_project_repositories_api_projects__project_id__repositories_get"];
        put?: never;
        /** Attach a repository to project */
        post: operations["attach_repository_to_project_api_projects__project_id__repositories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{project_id}/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Detach a repository from project */
        delete: operations["detach_repository_from_project_api_projects__project_id__repositories__repository_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/pinned-projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List pinned projects */
        get: operations["list_pinned_projects_api_users__user_id__pinned_projects_get"];
        put?: never;
        /** Pin a project */
        post: operations["pin_project_api_users__user_id__pinned_projects_post"];
        delete?: never;
        options?: never;
        head?: never;
        /** Reorder pinned projects */
        patch: operations["reorder_pins_api_users__user_id__pinned_projects_patch"];
        trace?: never;
    };
    "/api/users/{user_id}/pinned-projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unpin a project */
        delete: operations["unpin_project_api_users__user_id__pinned_projects__project_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List datasets */
        get: operations["list_datasets_api_datasets_get"];
        put?: never;
        /** Create dataset version */
        post: operations["create_dataset_api_datasets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List data items */
        get: operations["list_data_api_data_get"];
        put?: never;
        /** Create a data item */
        post: operations["create_data_api_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repositories/{repository_id}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List sessions for a repository */
        get: operations["list_repo_sessions_api_repositories__repository_id__sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repositories/{repository_id}/sessions/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest session for a repository */
        get: operations["get_latest_repo_session_api_repositories__repository_id__sessions_latest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session */
        get: operations["get_session_api_sessions__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}/pipeline-steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List pipeline steps of a session */
        get: operations["list_pipeline_steps_api_sessions__session_id__pipeline_steps_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}/candidates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List candidates for a session */
        get: operations["list_candidates_api_sessions__session_id__candidates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/candidates/{candidate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Verify/unverify a candidate */
        patch: operations["verify_candidate_api_candidates__candidate_id__patch"];
        trace?: never;
    };
    "/api/users/{user_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Profile counters */
        get: operations["get_user_stats_api_users__user_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Contribution heatmap data */
        get: operations["get_user_contributions_api_users__user_id__contributions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CandidateRead */
        CandidateRead: {
            /**
             * Id
             * @description Candidate identifier.
             */
            id: number;
            /**
             * Session Id
             * @description Session that produced the candidate.
             */
            session_id: number;
            /**
             * Data
             * @description Structured detection payload captured during processing.
             */
            data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Is Verified
             * @description Manual verification flag for the candidate.
             */
            is_verified: boolean;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when the candidate was recorded.
             */
            created_at: string;
        };
        /** CandidateVerifyUpdate */
        CandidateVerifyUpdate: {
            /**
             * Is Verified
             * @description Whether the candidate has been verified by a reviewer.
             * @example true
             */
            is_verified: boolean;
        };
        /** ContributionBucket */
        ContributionBucket: {
            /**
             * Date
             * Format: date
             * @description Calendar date for the bucket entry.
             */
            date: string;
            /**
             * Count
             * @description Number of contributions recorded for the day.
             */
            count: number;
        };
        /** ContributionRead */
        ContributionRead: {
            /**
             * Buckets
             * @description Time-series contribution buckets.
             * @example [
             *       {
             *         "count": 3,
             *         "date": "2024-01-01"
             *       }
             *     ]
             */
            buckets: components["schemas"]["ContributionBucket"][];
            /**
             * Sky Points
             * @description Optional set of sky coordinates representing contributions.
             */
            sky_points?: components["schemas"]["ContributionSkyPoint"][] | null;
        };
        /** ContributionSkyPoint */
        ContributionSkyPoint: {
            /**
             * Ra
             * @description Right ascension in degrees.
             */
            ra: number;
            /**
             * Dec
             * @description Declination in degrees.
             */
            dec: number;
            /**
             * Repository Id
             * @description Repository associated with the sky point.
             */
            repository_id: number;
        };
        /** DataCreate */
        DataCreate: {
            /**
             * Dataset Id
             * @description Dataset identifier that the item belongs to.
             */
            dataset_id: number;
            /**
             * Hash
             * @description Content hash used to deduplicate items.
             * @example 0x8aab5c9f
             */
            hash: string;
            /**
             * Fits Original Path
             * @description Path to the persisted FITS file.
             * @example /data/uploads/HIP65211/2024-02-01/raw.fits
             */
            fits_original_path: string;
            /**
             * Fits Image Path
             * @description Optional derived image path associated with the FITS source.
             */
            fits_image_path?: string | null;
            /**
             * Fits Data Json
             * @description Structured FITS metadata extracted from the file.
             */
            fits_data_json?: {
                [key: string]: unknown;
            } | null;
            /**
             * Metadata Json
             * @description Arbitrary metadata describing the data item.
             */
            metadata_json?: {
                [key: string]: unknown;
            } | null;
        };
        /** DataRead */
        DataRead: {
            /** Id */
            id: number;
            /** Dataset Id */
            dataset_id: number;
            /** Hash */
            hash: string;
            /** Fits Original Path */
            fits_original_path: string;
            /**
             * Fits Image Path
             * @description Optional derived image path associated with the FITS source.
             */
            fits_image_path?: string | null;
            /**
             * Fits Data Json
             * @description Structured FITS metadata extracted from the file.
             */
            fits_data_json?: {
                [key: string]: unknown;
            } | null;
            /**
             * Metadata Json
             * @description Arbitrary metadata describing the data item.
             */
            metadata_json?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             * @description Record creation timestamp.
             */
            created_at: string;
            /**
             * Updated At
             * @description Timestamp of the most recent update, if any.
             */
            updated_at?: string | null;
        };
        /** DatasetCreate */
        DatasetCreate: {
            /**
             * Repository Id
             * @description Repository that owns the dataset version.
             */
            repository_id: number;
            /**
             * Version
             * @description Monotonic dataset version within the repository.
             * @example 2
             */
            version: number;
            /**
             * Captured At
             * @description Optional capture time associated with the dataset contents.
             */
            captured_at?: string | null;
        };
        /** DatasetRead */
        DatasetRead: {
            /** Id */
            id: number;
            /** Repository Id */
            repository_id: number;
            /** Version */
            version: number;
            /**
             * Captured At
             * @description Capture timestamp for the dataset version.
             */
            captured_at?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when the dataset version was created.
             */
            created_at: string;
        };
        /**
         * FollowCreate
         * @description Request payload for following another user.
         */
        FollowCreate: {
            /**
             * Following Id
             * @description Identifier of the user that the caller will follow.
             * @example 42
             */
            following_id: number;
        };
        /** FollowRead */
        FollowRead: {
            /**
             * Follower Id
             * @description Follower user identifier.
             */
            follower_id: number;
            /**
             * Following Id
             * @description User being followed.
             */
            following_id: number;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when the relationship was created.
             */
            created_at: string;
        };
        /**
         * FollowerCreate
         * @description Request payload for adding a follower to a user.
         */
        FollowerCreate: {
            /**
             * Follower Id
             * @description Identifier of the user that will follow the path user.
             * @example 7
             */
            follower_id: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PinCreate */
        PinCreate: {
            /**
             * Project Id
             * @description Project identifier to pin.
             */
            project_id: number;
            /**
             * Position
             * @description Optional slot to insert the project at.
             */
            position?: number | null;
        };
        /** PinRead */
        PinRead: {
            /**
             * User Id
             * @description User that pinned the project.
             */
            user_id: number;
            /**
             * Project Id
             * @description Pinned project identifier.
             */
            project_id: number;
            /**
             * Position
             * @description Optional explicit ordering for pinned projects.
             */
            position?: number | null;
            /**
             * Pinned At
             * Format: date-time
             * @description Timestamp when the project was pinned.
             */
            pinned_at: string;
            /** @description Project details when eager-loaded. */
            project?: components["schemas"]["ProjectRead"] | null;
        };
        /** PinReorder */
        PinReorder: {
            /**
             * Project Ids
             * @description Ordered list of project identifiers representing the desired pin order.
             * @example [
             *       10,
             *       5,
             *       8
             *     ]
             */
            project_ids: number[];
        };
        /** PipelineStepRead */
        PipelineStepRead: {
            /**
             * Step Id
             * @description Unique step identifier within the run.
             */
            step_id: number;
            /**
             * Run Id
             * Format: uuid
             * @description Run identifier that owns the pipeline step.
             */
            run_id: string;
            /**
             * Step Name
             * @description Name of the pipeline step.
             */
            step_name: string;
            /**
             * Status
             * @description Current status for the step (e.g. queued, running, done).
             */
            status: string;
            /**
             * Progress
             * @description Completion percentage for the step.
             */
            progress: number;
            /**
             * Data
             * @description Optional structured payload attached to the step.
             */
            data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Log
             * @description Human-readable log output produced by the step.
             */
            log?: string | null;
            /**
             * Started At
             * @description Timestamp when the step started.
             */
            started_at?: string | null;
            /**
             * Finished At
             * @description Timestamp when the step finished.
             */
            finished_at?: string | null;
        };
        /**
         * ProjectCreate
         * @example {
         *       "description": "Cross-mission validation for new exoplanet candidates.",
         *       "name": "TESS Transit Deep Dive",
         *       "start_date": "2024-02-01T00:00:00Z"
         *     }
         */
        ProjectCreate: {
            /**
             * Name
             * @description Project title displayed to collaborators.
             * @example TESS Transit Deep Dive
             */
            name: string;
            /**
             * Description
             * @description Optional summary describing the project's focus.
             */
            description?: string | null;
            /**
             * Start Date
             * @description Datetime when the project became active.
             */
            start_date?: string | null;
        };
        /** ProjectMemberCreate */
        ProjectMemberCreate: {
            /**
             * User Id
             * @description Identifier of the user joining the project.
             */
            user_id: number;
            /**
             * Role
             * @description Role assigned to the user within the project.
             */
            role: string;
        };
        /** ProjectMemberRead */
        ProjectMemberRead: {
            /**
             * Project Id
             * @description Project identifier the member belongs to.
             */
            project_id: number;
            /**
             * User Id
             * @description Member user identifier.
             */
            user_id: number;
            /**
             * Role
             * @description Role assigned to the member (e.g. pm, member).
             */
            role: string;
            /**
             * Joined At
             * Format: date-time
             * @description Timestamp when the user joined the project.
             */
            joined_at: string;
            /** @description User metadata populated when eager-loaded. */
            user?: components["schemas"]["UserRead"] | null;
        };
        /** ProjectMemberUpdate */
        ProjectMemberUpdate: {
            /**
             * Role
             * @description New role to apply to the project member.
             */
            role: string;
        };
        /** ProjectRead */
        ProjectRead: {
            /**
             * Name
             * @description Project title displayed to collaborators.
             * @example TESS Transit Deep Dive
             */
            name: string;
            /**
             * Description
             * @description Optional summary describing the project's focus.
             */
            description?: string | null;
            /**
             * Start Date
             * @description Datetime when the project became active.
             */
            start_date?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Members Count
             * @description Computed count of users participating in the project.
             * @default 0
             */
            members_count: number;
            /**
             * Tags
             * @description List of labels associated with the project (placeholder until storage is available).
             */
            tags?: string[] | null;
        };
        /** ProjectRepositoryLinkCreate */
        ProjectRepositoryLinkCreate: {
            /**
             * Repository Id
             * @description Repository linked to the project.
             */
            repository_id: number;
            /**
             * Uploaded By
             * @description User that performed the upload and link.
             */
            uploaded_by: number;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /**
             * Name
             * @description Updated project name.
             */
            name?: string | null;
            /**
             * Description
             * @description Updated project description.
             */
            description?: string | null;
            /**
             * Start Date
             * @description New project start datetime.
             */
            start_date?: string | null;
        };
        /**
         * RepositoryCreate
         * @example {
         *       "description": "Time-series photometry for HIP 65211.",
         *       "name": "hip-65211-lightcurves",
         *       "user_id": 1
         *     }
         */
        RepositoryCreate: {
            /**
             * Name
             * @description Human-friendly repository name displayed in the UI.
             * @example hip-65211-lightcurves
             */
            name: string;
            /**
             * Description
             * @description Optional longer-form description of the repository contents.
             */
            description?: string | null;
            /**
             * User Id
             * @description Owner user identifier.
             * @example 1
             */
            user_id: number;
        };
        /** RepositoryRead */
        RepositoryRead: {
            /**
             * Name
             * @description Human-friendly repository name displayed in the UI.
             * @example hip-65211-lightcurves
             */
            name: string;
            /**
             * Description
             * @description Optional longer-form description of the repository contents.
             */
            description?: string | null;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * @description Last update timestamp for the repository.
             */
            updated_at?: string | null;
            /**
             * Starred
             * @description Whether the requesting user has starred this repository.
             * @default false
             */
            starred: boolean;
            /** @description Latest session summary when requested. */
            session?: components["schemas"]["SessionSummary"] | null;
        };
        /** RepositoryUpdate */
        RepositoryUpdate: {
            /**
             * Name
             * @description New repository name. Must remain unique per user.
             */
            name?: string | null;
            /**
             * Description
             * @description Updated description for the repository.
             */
            description?: string | null;
        };
        /** SessionRead */
        SessionRead: {
            /**
             * Id
             * @description Session identifier.
             */
            id?: number | null;
            /**
             * Run Id
             * @description Stable run identifier for the session.
             */
            run_id?: string | null;
            /**
             * Status
             * @description Current lifecycle status (e.g. running, finished).
             */
            status?: string | null;
            /**
             * Current Step
             * @description Name of the pipeline step currently executing.
             */
            current_step?: string | null;
            /**
             * Progress
             * @description Overall completion percentage for the session.
             */
            progress?: number | null;
            /**
             * Started At
             * @description Timestamp when the session started.
             */
            started_at?: string | null;
            /**
             * Finished At
             * @description Timestamp when the session finished, if applicable.
             */
            finished_at?: string | null;
            /**
             * Repository Id
             * @description Repository associated with the session.
             */
            repository_id?: number | null;
            /**
             * Dataset Id
             * @description Dataset associated with the session.
             */
            dataset_id?: number | null;
            /**
             * Data Id
             * @description Data item processed by the session.
             */
            data_id?: number | null;
            /**
             * Data Version
             * @description Version value tracked for the data item when the session ran.
             */
            data_version?: number | null;
        };
        /** SessionSummary */
        SessionSummary: {
            /**
             * Id
             * @description Session identifier.
             */
            id?: number | null;
            /**
             * Run Id
             * @description Stable run identifier for the session.
             */
            run_id?: string | null;
            /**
             * Status
             * @description Current lifecycle status (e.g. running, finished).
             */
            status?: string | null;
            /**
             * Current Step
             * @description Name of the pipeline step currently executing.
             */
            current_step?: string | null;
            /**
             * Progress
             * @description Overall completion percentage for the session.
             */
            progress?: number | null;
            /**
             * Started At
             * @description Timestamp when the session started.
             */
            started_at?: string | null;
            /**
             * Finished At
             * @description Timestamp when the session finished, if applicable.
             */
            finished_at?: string | null;
        };
        /** StarRead */
        StarRead: {
            /**
             * User Id
             * @description User who starred the repository.
             */
            user_id: number;
            /**
             * Repository Id
             * @description Starred repository identifier.
             */
            repository_id: number;
            /**
             * Starred At
             * Format: date-time
             * @description Timestamp of the starring action.
             */
            starred_at: string;
        };
        /**
         * UserCreate
         * @example {
         *       "email": "astro@example.com",
         *       "profile": {
         *         "avatar_url": "https://cdn.example.com/avatars/alice.png",
         *         "bio": "Researcher focusing on near-earth object detection."
         *       }
         *     }
         */
        UserCreate: {
            /**
             * Email
             * Format: email
             * @description Unique email address used for communication and login.
             * @example astro@example.com
             */
            email: string;
            /** @description Optional profile details to create alongside the user. */
            profile?: components["schemas"]["UserProfileCreate"] | null;
        };
        /**
         * UserProfileCreate
         * @example {
         *       "avatar_url": "https://cdn.example.com/avatars/alice.png",
         *       "bio": "Researcher focusing on near-earth object detection."
         *     }
         */
        UserProfileCreate: {
            /**
             * Bio
             * @description Short biography shown on user profiles.
             * @example Researcher focusing on near-earth object detection.
             */
            bio?: string | null;
            /**
             * Avatar Url
             * @description Absolute URL pointing to the user's avatar image.
             * @example https://cdn.example.com/avatars/alice.png
             */
            avatar_url?: string | null;
        };
        /** UserProfileRead */
        UserProfileRead: {
            /**
             * Bio
             * @description Short biography shown on user profiles.
             * @example Researcher focusing on near-earth object detection.
             */
            bio?: string | null;
            /**
             * Avatar Url
             * @description Absolute URL pointing to the user's avatar image.
             * @example https://cdn.example.com/avatars/alice.png
             */
            avatar_url?: string | null;
            /** User Id */
            user_id: number;
        };
        /**
         * UserProfileUpdate
         * @description Fields that can be patched on an existing profile.
         */
        UserProfileUpdate: {
            /**
             * Bio
             * @description Short biography shown on user profiles.
             * @example Researcher focusing on near-earth object detection.
             */
            bio?: string | null;
            /**
             * Avatar Url
             * @description Absolute URL pointing to the user's avatar image.
             * @example https://cdn.example.com/avatars/alice.png
             */
            avatar_url?: string | null;
        };
        /** UserRead */
        UserRead: {
            /**
             * Email
             * Format: email
             * @description Unique email address used for communication and login.
             * @example astro@example.com
             */
            email: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** @description Associated profile information when available. */
            profile?: components["schemas"]["UserProfileRead"] | null;
        };
        /** UserStatsRead */
        UserStatsRead: {
            /**
             * Projects
             * @description Number of projects the user participates in.
             */
            projects: number;
            /**
             * Uploads
             * @description Number of repositories owned by the user.
             */
            uploads: number;
            /**
             * Followers
             * @description How many users follow this user.
             */
            followers: number;
            /**
             * Following
             * @description How many users the user follows.
             */
            following: number;
        };
        /** UserUpdate */
        UserUpdate: {
            /**
             * Email
             * @description Updated email address. Must remain unique across users.
             */
            email?: string | null;
            /** @description Profile fields to upsert for the user. */
            profile?: components["schemas"]["UserProfileUpdate"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_root_api__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current service health details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string | number;
                    };
                };
            };
        };
    };
    list_users_api_users_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All users ordered by identifier. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"][];
                };
            };
        };
    };
    create_user_api_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description The newly created user including profile data, when present. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Email already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error when the payload is malformed. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_api_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user resource with profile data when available. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description The updated user resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_api_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_profile_api_users__user_id__profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The profile resource for the requested user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileRead"];
                };
            };
            /** @description User or profile missing. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_profile_api_users__user_id__profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdate"];
            };
        };
        responses: {
            /** @description The updated profile resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileRead"];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_following_api_users__user_id__following_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users that the requested account is following. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"][];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    follow_user_api_users__user_id__following_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FollowCreate"];
            };
        };
        responses: {
            /** @description The follow relationship that was created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowRead"];
                };
            };
            /** @description Users cannot follow themselves. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User or target user not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Follow relationship already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unfollow_user_api_users__user_id__following__following_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
                following_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Follow relationship not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_followers_api_users__user_id__followers_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users that follow the requested account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"][];
                };
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_follower_api_users__user_id__followers_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FollowerCreate"];
            };
        };
        responses: {
            /** @description The follow relationship that was created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowRead"];
                };
            };
            /** @description Users cannot follow themselves. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User or follower not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Follow relationship already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_follower_api_users__user_id__followers__follower_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
                follower_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Follow relationship not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_repositories_api_repositories_get: {
        parameters: {
            query?: {
                /** @description Filter by owner identifier. */
                owner_id?: number | null;
                /** @description Free-text search on name/description. */
                q?: string | null;
                /** @description Filter by starring user. */
                starred_by?: number | null;
                /** @description Include latest session summary. */
                include_session?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_repository_api_repositories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RepositoryCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_repositories_api_users__user_id__repositories_get: {
        parameters: {
            query?: {
                /** @description Include latest session summary. */
                include_session?: boolean;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_repository_api_repositories__repository_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_repository_api_repositories__repository_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RepositoryUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_repository_api_repositories__repository_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    star_repository_api_repositories__repository_id__star_put: {
        parameters: {
            query: {
                /** @description User identifier performing the star. */
                user_id: number;
            };
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unstar_repository_api_repositories__repository_id__star_delete: {
        parameters: {
            query: {
                /** @description User identifier undoing the star. */
                user_id: number;
            };
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_stars_api_users__user_id__stars_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StarRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_projects_api_projects_get: {
        parameters: {
            query?: {
                /** @description Filter by user membership */
                member_id?: number | null;
                /** @description Free-text search */
                q?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_project_api_projects_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_api_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_api_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_project_api_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_project_members_api_projects__project_id__members_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_project_member_api_projects__project_id__members_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMemberCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_project_member_api_projects__project_id__members__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_member_api_projects__project_id__members__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMemberUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_project_repositories_api_projects__project_id__repositories_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepositoryRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    attach_repository_to_project_api_projects__project_id__repositories_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectRepositoryLinkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    detach_repository_from_project_api_projects__project_id__repositories__repository_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_pinned_projects_api_users__user_id__pinned_projects_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PinRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pin_project_api_users__user_id__pinned_projects_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PinCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PinRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reorder_pins_api_users__user_id__pinned_projects_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PinReorder"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unpin_project_api_users__user_id__pinned_projects__project_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_datasets_api_datasets_get: {
        parameters: {
            query: {
                /** @description Repository identifier */
                repository_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_dataset_api_datasets_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatasetCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_data_api_data_get: {
        parameters: {
            query: {
                /** @description Dataset identifier */
                dataset_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_data_api_data_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_repo_sessions_api_repositories__repository_id__sessions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_latest_repo_session_api_repositories__repository_id__sessions_latest_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_pipeline_steps_api_sessions__session_id__pipeline_steps_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PipelineStepRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_candidates_api_sessions__session_id__candidates_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CandidateRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_candidate_api_candidates__candidate_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                candidate_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CandidateVerifyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_stats_api_users__user_id__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatsRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_contributions_api_users__user_id__contributions_get: {
        parameters: {
            query?: {
                from?: string | null;
                to?: string | null;
                include_sky_points?: boolean;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
